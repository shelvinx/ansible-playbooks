---
- name: Store Public DNS of VM as a variable
  set_fact:
    vm_public_dns: "{{ hostvars[inventory_hostname].public_dns_hostnames[0] }}"

- name: Use the stored public DNS in another task
  debug:
    msg: "The stored public DNS is: {{ vm_public_dns }}"

- name: Check if certificate exists by friendly name with wildcard
  win_shell: |
    $cert = Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.FriendlyName -like 'azure-cert*' }
    if ($cert) { exit 0 } else { exit 1 }
  register: cert_check
  ignore_errors: true

- name: Debug certificate check
  debug:
    msg: "Certificate check result: {{ cert_check.rc }}"
  
- name: Create certificate if not present
  win_command: |
    C:\ProgramData\chocolatey\bin\wacs.exe --accepttos --host "{{ vm_public_dns }}" --source manual --friendlyname "azure-cert"
  when: cert_check.rc != 0
  register: cert_creation

- name: Ensure certificate was created
  assert:
    that:
      - cert_creation.rc == 0
  when: cert_check.rc != 0

- name: Set certificate thumbprint for RDP listener
  win_shell: |
    $tsgs = gwmi -class "Win32_TSGeneralSetting" -Namespace root\cimv2\terminalservices -Filter "TerminalName='RDP-tcp'"
    $azureCert = gci -path cert:/LocalMachine/My | Where-Object { $_.FriendlyName -like "*azure-cert*" }
    $thumb = $azureCert.Thumbprint
    swmi -path $tsgs.__path -argument @{SSLCertificateSHA1Hash="$thumb"}
    Restart-Service -Name TermService -Force
  when: cert_check.rc != 0

- name: Add Firefox syspin to Run key
  win_regedit:
    path: 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Run'
    name: 'PinFirefoxSyspin'
    data: 'syspin "C:\Program Files\Mozilla Firefox\firefox.exe" 51201'
    type: string
    state: present

- name: Find Edge uninstaller
  win_find:
    paths: 'C:\Program Files (x86)\Microsoft\Edge\Application'
    patterns: 'setup.exe'
    recurse: yes
  register: edge_installer
  no_log: true
  tags:
    - uninstall_msedge

- name: Uninstall Microsoft Edge via shell
  win_shell: >
    "{{ item.path }}" --uninstall --system-level --verbose-logging --force-uninstall
  loop: "{{ edge_installer.files }}"
  when: edge_installer.matched > 0
  args:
    executable: cmd
  changed_when: edge_installer.matched > 0
  failed_when: false
  tags:
    - uninstall_msedge

- name: Render registry tweaks file
  template:
    src: tweaks.reg.j2
    dest: C:\Windows\Temp\tweaks.reg
  register: reg_file

- name: Import registry tweaks
  win_command: reg import C:\Windows\Temp\tweaks.reg
  args:
    removes: C:\Windows\Temp\tweaks.reg
  when: reg_file.changed
